/*지금까지와는 전혀 다른 작업할 거시야~!*/

#chat-screen {
    background-color: #abc1d1;
    height: 500vh;
    
}
/*
시작하자마자 alt-header수정하러감 아마그.., 버거아이콘 수정하러!
그리고나서 height를 아주 길게 줄것임!

fiexd로 상태창 고정시키는 숙제! 햇엇쥐!
두번째로 이름이있는 제목부분도 같이 고정시킬 꺼임!

chat.css에 있는 alt-header가 고정되어야함!(엥??? 시트가 다른데???)
*/

#chat-screen .alt-header, 
#chat-screen .status-bar {
    /*아하 그래서! 이번에 body에 id를 주고 선택하는 거구나!*/
    top: 0px;
    position:fixed;
    width: 100%;/*fixed 할때 꼭 너비 주기~! 잊지마 안그럼 줄어든다..,,*/
    box-sizing: border-box;/*위의 너비설정으로 인해 아이콘이 사라졋을때 RG?RG?*/
    /*
    이렇게 까지하고나면 중앙정렬안된거 알게됨 ㅅㅂ 핵꿀팁먼데
    그거 적용하러감 alt-header.css로!
    ?!?!?
    
    상태바도 고정해주는데 난이미 했으니 안해두됨 걍 위에 (,)추가임
    */
    background-color: #abc1d1;
    /*
    이거하면 tatus-bar가 또안보임 이걸 z-index라는 속성으로 수정할수 있음
    z-index는 기본적으로, div가 있는 위치가 맨앞에서부터 몇번째인지 나타냄
    
    즉!, leyer의 순서가 몇번째인지 나타내는 것임
    
    */
}
#chat-screen .status-bar {
    z-index: 2;
    /*상태바가 헤더보다 위에 있음! 높은숫자가 위로 옴~!
    이 것은 layer 같은거임! 절대적위치(absolute)나 고정된 위치(fixed)에
    대해서 설정할 수있음*/
}

#chat-screen .alt-header {
    top: 10px;
    z-index: 1;
} 
@keyframes fadeIn {
    from{
        transform: translateY(30px);
        opacity: 0;
    }
    to{
        transform: none;
        opacity: 1;
    }
    
}

.main-screen.main-chat {
    /*클래스 속성 내에 name1과 name2가 모두 설정된 모든 요소를 ​​선택
    공백으로 연결해서 사용 하면 하위 개체로 지정 두개 다름!*/
    margin-top: 120px;
    display: flex;
    flex-direction: column;
    align-items: center;
    /* animation: fadeIn 0.8s linear; */
}


.chat__timestamp {
    color: white;
    background-color: #92a4b2;
    padding: 15px;
    border-radius: 25px;
    font-size: 14px;
    margin-bottom: 25px;
    animation: fadeIn 0.8s linear;
}

@keyframes message {
    from{
        transform: translateX(-30px);     
        
    }
    to{
        opacity: 1;
        transform: none;
    }
    
    
}

.messaget-row {
    width: 100%;
    display: flex;
    margin-bottom: 25px;
    opacity: 0;
    animation: message 0.6s linear forwards;
    animation-delay: 1s;
}
.messaget-row img {
    width: 50px;
    height: 50px;
    border-radius: 20px;
    margin-right: 10px;
}
.message__author {
    margin-bottom: 5px;
    display: block;
}
.message__info {
    display: flex;
    align-items: flex-end;
}
.message__buble {
    background-color: white;
    padding: 8px 10px;
    font-size:  18px;
    border-radius: 12px;
    border-top-left-radius: 0px;
    margin-right: 10px;
    
}
.message__time,
.message__author {
    opacity: 0.8;
    font-size: 14px;
    
}
@keyframes messageOwn {
    from{
        transform: translateX(30px);     
        opacity: 0;
        
    }
    to{
        opacity: 1;
        transform: none;
    }
    
}
.message-row--own {
    justify-content: flex-end;
    animation: messageOwn 0.6s linear forwards; 
    animation-delay: 1.8s;
}
.message-row--own .message__buble {
    background-color: var(--yellow);
    border-top-right-radius: 0px;
    border-top-left-radius: 12px;
    margin-right: 0px;
    margin-left: 10px;
  
}
  /* 

    flex의 children에는 order이라는 기능이 있음!
    flex의 자식들에게만 적용되는 속성으로 순서를 바꿀수잇음 이렇게!
    .messaget-row--own .message__buble{
    order: 1;
  }

  .messaget-row--own .message__time{
    order: 0;
  }

  이러면 코드가 길어지니 다른 방법도 있다~!

  */
 .message-row--own .message__info{
    flex-direction: row-reverse; /*와웅~*/
  }

.reply {
    position: fixed;
    bottom: 0px;
    width: 100%;
    background-color: white;
    display: flex;
    justify-content: space-between;
    padding:  5px 25px;
    box-sizing: border-box;
    align-items: center;
    transition: transform 0.3s ease-in-out;
}
.reply .reply__column:first-child {
    width: 10%;
}
.reply .reply__column:last-child{
    width: 90%;
    position: relative;
}
.reply input {
    padding-left: 10px;
    height: 40px;
    width: 100%;
    border:var(--gery-border);
    border-radius: 25px;
    transition: all 0.3s ease-in-out;
}
.reply i{
    opacity: 0.5;
}
.reply__column:last-child>i,
.reply__column:last-child button {
    position: absolute;
    right: -11px;
    top: 2px;

}
.reply__column:last-child >i{
    right: 35px;
    top: 22px;
    font-size: 24px;
}
.reply__column:last-child button {
    background-color: var(--yellow);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
}
.reply__column:last-child button i{
    opacity: 1;
}
.reply__column:last-child button:active,
.reply__column:last-child button:focus{
    outline: none;
}

/* 내부적으로 focus된 태그가 있는지 알수 있게 해주는 속성  : focus-within */ 

.reply:focus-within .reply__column:first-child,
.reply:focus-within .fa-face-laugh-beam,
.reply:focus-within button {
    transition: opacity 0.3s ease-in-out;
}


.reply:focus-within .reply__column:first-child,
.reply:focus-within .fa-face-laugh-beam,
.reply:focus-within button {
    opacity: 0;

}

.reply:focus-within input {
    width: 90vw;
    transform: translateX(-12.5%) translateY(-80px);
}
.reply:focus-within {
   transform: translateY(80px);
}